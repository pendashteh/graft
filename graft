#!/usr/bin/env bash

__main__help='Usage:
 $ __app__ ${datadir__:-} ${task:-help}
'

__puton__ () {
  datadir__=${datadir__:-$HOME/.undies/leaves}
  pattern__mktemp__=${pattern__mktemp__:-'XXXX--%s.leave.md'}
  pattern__find__=${pattern__find__:-'*%s*.leave.md'}
  mkdir -p $datadir__
  if [ -e $datadir__/.graft__ ]; then
    source $datadir__/.graft__
  fi
}

git__help='@arg git command @does initiates or executes git commands at datadir__'
git__ () {
  git -C $datadir__ rev-parse --is-inside-work-tree >/dev/null
  if test ! $? -eq 0; then {
    __exec git init $datadir__
  } else {
    __exec git -C $datadir__ "${@:-status}"
  } fi
}

__fallback__ () {
  if [ -d $1 ]; then
    datadir__=$1
    shift
    __run "$@"
  else
    >&2 __help $@
  fi
}

: '@deprecated can be done instead with `graft .`'
here__ () {
  datadir__=$(pwd)
  __puton__ "$@"
  __run "$@"
}

__pattern () {
  local varname='pattern__'$1'__'
  local title=$2
  printf ${!varname} $title
}

copy__help='@arg file @does copy file content into a new leaf'
copy__ () {
  local file=$1
  [ ! -e $file ] && return -1
  local title_default=$(basename $file)
  read -p "title? [$title_default] " title
  test -z $title && title=$title_default
  local test
  __prepare newfile $title
  echo '; copied from '$file >> $newfile
  cat $file >> $newfile
  __edit $newfile
}

__prepare () {
  local -n ref_newfile=$1
  local title=$2
  local pattern=$(__pattern mktemp $title)
  local mktemp_dir=$datadir__/$(dirname $pattern)
  local mktemp_tpl=$(basename $pattern)
  mkdir -p $mktemp_dir
  local mktemp_path=$(mktemp --dry-run --tmpdir=$mktemp_dir $mktemp_tpl)
  __exec touch $mktemp_path || {
    rm $mktemp_path
    return 1
  }
  echo 'created:' $(date) >> $mktemp_path
  echo '--' >> $mktemp_path
  read ${!ref_newfile} <<<$mktemp_path
}

new__ () {
  local title=$1
  test -z $title && read -p 'title? ' title
  __prepare newfile $title || return
  __edit $newfile
}

__edit () {
  __exec vim '+ normal Go' $1
}

list__ () {
  local title=${1:-''}
  set -o noglob
  find $datadir__ -wholename $(__pattern find $title) 2>/dev/null
  return 0
}

move__help='@arg pattern @arg destination:dir @does move the leaf to destinatoin directory.'
move__ () {
  local pattern=$1
  local dest=$2
  [ -d "$dest" ] || return -1
  __exec mv $(list__ $pattern) $dest
}

edit__ () {
  local pattern=$1
  for leaf in $(list__ $pattern); do
    __edit $leaf
  done
}

loop__ () {
  local title=$1
  test -n $title || read -p 'title? ' title
  for leaf in $(list__ $title); do {
    while true; do { {
    echo $leaf
    read -p '[v,e,n,q,d,r,?]? ' -n1
    echo
    case $REPLY in
      '?')
        echo 'v: view'
        echo 'e: edit'
        echo 'n: next'
        echo 'q: quit'
        echo 'd: delete'
        echo 'r: rename'
        echo '?: help'
	;;
      v)
        __confirm__= __exec less $leaf
	;;
      d)
        __exec rm $leaf
	break
	;;
      r)
        read -p $(basename $leaf)', rename? ' rename
	rename=$(dirname $leaf)/$rename
	__exec mv $leaf $rename && leaf=$rename
	;;
      e)
        __edit $leaf
	;;
      q)
        break 2
	;;
      n|*)
	 break
	;;
    esac
  } } done
  } done
  echo done
}

tree__help='@arg [pattern=*] [range=1,] @prints tree of leaves and their headlines @return null'
tree__ () {
  local pattern=${1:-'*'}
  local range=${2:-''}
  for leaf in $(list__ "$pattern"); do
    echo $leaf
    headings__ $leaf $range | sed 's|#|-|g'
  done
}

headings__help='@arg file @arg range=1, @prints list of heaings'
headings__ () {
  read leaf range <<< $@
  test ! -z $leaf && test -f $leaf || return -1
  range=${range:-'1,'}
  cat $leaf | grep -E "^[\#]{$range}[^\#].*$"
}

search__ () {
  local pattern=$1
  local term=$2
  __exec grep -nHR "$term" $datadir__/$(__pattern find $pattern)
}

todo__ () {
  local pattern=${1:-''}
  __silent__=1 search__ "$pattern" '\[\s\]'
}

done__ () {
  local pattern=${1:-''}
  __silent__=1 search__ "$pattern" '\[x\]'
}

source $(dirname $(realpath $BASH_SOURCE))/vendor/undies/undies
